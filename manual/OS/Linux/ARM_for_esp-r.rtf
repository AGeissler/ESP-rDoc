{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red247\green247\blue247;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13780\viewh11700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc

\b \cf0 Setting up ARM computers for use with ESP-r12\
13 December 2014\
ESRU, Glasgow, Scotland
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs22 \cf0 Introduction
\b0\fs20 \
\
ESP-r works on a range of computers from desktops to enterprise servers.  This document discusses how to implement an ESP-r distribution on a computers at the other extreme - the Raspberry Pi, BeagleBoard Black, Odroid-U3 and even a rooted Android tablet. These match-box sized single board computers (which draw ~2-6W) none-the-less supports a range of simulation tasks one might expect in training workshops where models of limited complexity or as part of embedded experiments.\
\
These notes are based on the standard Linux setup and build process with tweaks needed for ARM processors as well as memory and disk limitations that apply to some of these computers. Each include package managers which will be familiar to Linux users and involve the same tool chain for compiling and managing ESP-r software. Reading the documentation on the vendors site as well as acquiring basic Linux skills is a 
\b really good idea
\b0 !\
\

\b\fs22 Before you start - Raspberry Pi
\b0\fs20 \
\
Review the Raspberry Pi WIKI <en.wikipedia.org/wiki/Raspberry_Pi> as well as <www.raspberrypi.org> and <www.element14.com> web sites for further guidance.   Follow the recommendations for downloading the OS image and merging it onto a SDHC card. A class 10 8GB SD card is recommended. The steps below will ensure that all the space in a larger drive can be used.\
\
You can run a Pi headless (via a SSH session from another computer) or by connecting a monitor and/or TV, mouse and keyboard.  Your choice.  Similarly, you can run ESP-r in either graphic or pure-text mode on a Pi.  The OS supports the same powerful scripting environment that you can use on compute servers.\
\
The first time you power up a Pi run the configuration tool (you can also do this later to tweak the Pi). The configuration tool does not need graphics to run so you can do this prior to starting a window manager. Here are the options:\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}Use the expand-to-fill facility to grow the initial OS to fill the SD card.  \
{\listtext	\'95	}Use the keyboard setup utility it makes subsequent tasks easier even if you later run the Pi headless.  \
{\listtext	\'95	}Set a password and remember it.\
{\listtext	\'95	}Set the local - choose something like en-gb or en-usa which use a '.' for a decimal place.  \
{\listtext	\'95	}Set the memory split between the CPU and GPU.  You want to maximise CPU memory so choose 32 or 64MB for the GPU.\
{\listtext	\'95	}Set the over clock to High (950MHz) or Turbo.\
{\listtext	\'95	}Leave the boot option as non-gui so you have maximum flexibility.\
{\listtext	\'95	}Select the raspberry-config update (this will scan the repository and download and install recent software changes).\
{\listtext	\'95	}Set your time-zone.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
When you select <finish> it will undertake the pending tasks and reboot the Pi.  If you want to re-visit the facility give the command:\
  
\b sudo raspi-config
\b0   \
\
Your next step is to increase the swap space (virtual memory).  The initial setting is a 100MB swop file.  For ESP-r compiling and use you will want between 600MB-1GB.  A discussion of the process can be found at <raspberrypi.stackexchange.com>.  You need to edit the file /etc/dphys-swapfile.  Use sudo nano or your favourite text editor and change the CONF_SWAPSIZE= value in the file.  To record this change give the following commands in a text or graphic command window (see below):\

\b sudo  /etc/init.d/dphys-swapfile stop\
sudo  /etc/init.d/dphys-swapfile start
\b0  \
\
\
If you stay in the initial text display you can issue commands for applications that do not use graphics (such as the ones listed below).  To start up the window manager give the command\
\
  
\b startx
\b0 \
\
which will start a graphical interface with the potential for an application/widget dock at the bottom and a number of icons on the left.  One of them is marked LXTerminal.  Click on that icon and a graphic command window will open (you could start more than one if you wanted to).  In the LXTerminal you can type in commands to run applications which are either text based or graphical in nature.\
\
\

\b Before you start - BeagleBone Black
\b0 \
\
The BBB uses a newer ARM processor than the Raspberry Pi, its floating point performance is better, but has the same 512MB memory constraint of the Pi.  Review the BBB <http://circuitco.com/support>, <http://circuitco.com/support/index.php?title=Debian_On_BeagleBone_Black>, <http://elinux.org/BeagleBoardUbuntu>.   \
\
Follow the recommendations for downloading the Debian Wheezy 7 OS image and merging it onto the microSD card. The process is similar to that for the Raspberry Pi and an 8GB class 10 microSDHC card is recommended.  Booting a BBB via the microSD card requires that you hold down a small boot switch as power is applied to the BBB. The boot switch is above the microSD card slot.  The documentation says that a BBB runs better powered from the 5VDC rather than via the USB Client port.  Hold down the switch for ~15 seconds and you should see the blue user LEDs blinking.  If you do not hold down the boot switch the internal Angstrom Linux will start.  To stop a BBB issue the command:\
\
  
\b sudo halt
\b0 \
\
Once the blue LED have stopped blinking you can remove power.  A restart (assuming the power is still connected) press the power button AND the boot button otherwise hold down the book button as you apply power.\
\
\

\b Expanding file system to fill microSD card
\b0 \
\
Debian images are sized to fit on a 2GB card, and retain this size when copied onto the microSD card. To expand the file system\
follow the instructions at <http://circuitco.com/support/index.php?title=Expanding_File_System_Partition_On_A_microSD>. Since microSD cards differ slightly in size, to ensure that you can backup your card and restore it to another card consider setting the expanded size a bit smaller than the maximum of the card.\
\

\b Creating swop space
\b0 \
\
The limited memory on the BBB requires the creation of swap space (600-1000MB of virtual memory) so that ESP-r can be compiled and run. A discussion of the process can be found at the BBB pages of eLinux.org <http://elinux.org/BeagleBoardUbuntu#Swapfile> and differ from that used on the Raspberry Pi.  Issue the following commands to create a 1GB swop:\
\pard\pardeftab720

\f1\fs26 \cf0 \cb2 \
 
\f0\b\fs20 sudo mkdir -p /var/cache/swap/   \
  sudo dd if=/dev/zero of=/var/cache/swap/swapfile bs=1M count=1024\
  sudo chmod 0600 /var/cache/swap/swapfile \
  sudo mkswap /var/cache/swap/swapfile \
  sudo swapon /var/cache/swap/swapfile\

\f2 \

\f0\b0 Then use a text editor to add the following to the /etc/fstab file so that swap is used every time you boot up.\
\

\f1\fs26  
\f0\b\fs20 /var/cache/swap/swapfile    none    swap    sw    0   0\

\f1\b0\fs26 \

\f0\b\fs20 \cb1 Installing a graphical environment
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
The Debian image that can be downloaded for a BBB is a minimal system that supports text interaction. Follow the instructions at <http://circuitco.com/support/index.php?title=Installing_LXDE> to install the LXDE desktop. After rebooting you will be presented with graphical login options.\
\

\b Before you start - Odroid-U3\
\
The Odroid-U3 
\b0 is a quad-core ARMv7l process with 2GB of memory and the option for a emmc on-board disk. With this specification it is no longer necessary to use constrained header files and disk access is less of an issue. Note that swap is not part of the initial state of the Odroid, creating a swap uses a similar process to the BBB. In other respects the setup follows the other ARM computers.\
\
\

\b Before you start - Android\
\

\b0 Many Android tablets have dual or quad-core ARMv7l processors with 1-2GB of memory and 8 or more GB of internal disk. There are a number of projects to host Linux on Android, e.g. Linux Deploy, typically as a disk image running in a so-called loop-back.  This requires rooting the device. ESP-r has been seen to work with Linux Deploy running Debian in conjunction with an App for SSH access and VNC.  Once setup the usual commands for apt-get can be used to install the dependencies.  ESP-r compiled on other ARMv7l devices run.  For Android devices with limited free memory be sure to use executables built with constrained arrays.\
\
The constraints of Android are for simulation use related to user interaction. The standard pop-up keyboard lacks the control and arrow keys so an alternative App needs to be sourced. A bluetooth keyboard is recommended.  Finger movements substitute for a mouse. The X11 interface can, however be driven by keystrokes so it may have an advantage over the GTK interface. Screens may have high resolution, but are physically small and difficult to see.  Some users may prefer to use ESP-r in text mode via a ssh shell access rather than a full desk top display. Also Andorid and Linux are both active and there may be limited memory available. \
\

\b\fs22 Command windows on ARM Linux
\b0\fs20 \
\
To accomplish many tasks you will need a command window.  In LXDE this is LXTerminal (on both the Raspberry Pi and BBB). It may be an icon on the desktop or it might be found in the LXDE menu under accessories.  Other desktops will offer different tools. If you are logging in remotely you have the choice of working with a text-only command window or using graphics (typically via forwarding X11 graphics via ssh). If you stay in the initial text display you can issue commands for applications that do not use graphics.  \
\
\

\b\fs22 Package mangers for ARM Linux
\b0\fs20 \
\
The base OS has much of what you need. Like Debian installing new software packages is based on apt-get (a command line tool).  For example, to install the helper tool xfig the syntax would be:\
\
  
\b sudo apt-get install name-of-package
\b0 \
\
which will temporarily give you administrative privileges and locate name-of-package and also list and acquire its dependencies.  Apt-get has other commands to remove packages, upgrade packages.  There are also commands for finding available packages via:\
\
  
\b apt-cache search
\b0  
\b "text-to-look-for"
\b0 \
\
Note: after running the update facility in raspi-config to get a newer version of raspi-config there may be other\
package updates found but not acted upon.  To enable the other packages issue the command:\
\
  
\b sudo apt-get update\
  sudo apt-get dist-upgrade
\b0 \
\
\

\b\fs22 Software needed to build ESP-r
\b0\fs20 \
\
To compile ESP-r you are going to need to install a number of tools and libraries.  These are similar to those included in a Ubuntu machine setup. In the list below are packages which you will need, they may already be included, in which case nothing happens. The list also includes helper applications that ESP-r expects to find. Install requests can be one at a time or you can also combine commands, for example:\
\
  
\b sudo apt-get install build-essential console-tools-dev expect-dev
\b0 \
  \
Development:  build-essential, g++, gcc, gfortran, gdb, libtool, subversion, libxml2, libxml2-dev, libxml2-utils libxslt1-dev libxslt1-dbg\
\
Graphics: imagemagick (screen grab & display)  xfonts-100dpi xfs xfig transfig\
Libraries:  libx11-dev,\
Networking:  openssh-server, ssh\
Shells:  csh\
Word processing:  enscript, psutils nedit\
\
For GTK development selecting the libgtk2.0-dev package will identify most of the dependencies you are likely to need. To assist with debugging also ask for the -dbg versions of the libraries such as:\
libfontconfig1-dbg, libcairo2-dbg, libpixman-1-0-dbg, libgtk2.0-0-dbg\
\
To find out about the compilers (gcc g++ and gfortran) use:\

\b   which gcc\
  gcc --version\
  which gfortran\
  gfortran --version\

\b0 \
\

\b\fs22 Setting up your account and folders
\b0\fs20 \
\
The initial 'pi' account can be used for all tasks.  You may prefer to have a separate 'training' account for casual users.\
\
To simplify other tasks, create a 'bin' folder within each user HOME folder (e.g. /home/fred/bin) at a later stage there are some ESP-r related scripts to copy into this bin folder.\
\
 
\b  cd\
  mkdir bin\
\

\b0 Create a folder for your simulation models (ones that you create and/or for exemplar models that you wish to explore.\
\

\b   cd\
  mkdir Models\
\

\b0 Now is a good time to reboot the Raspberry Pi to ensure that fonts and environment variables are registered. How might you do this? The command is:\
\
  
\b sudo reboot\
\

\b0 If you want to shut down the Raspberry Pi use the following command (before you disconnect the power):\
\
  
\b sudo halt\
\

\b0 \
ESP-r uses a custom Install script instead of  the usual automake based system used in many Linux packages.  Because the Pi uses an ARM processor you will have to use a bespoke version of the ESP-r Install script. (soon to be added to the developent_branch).
\b \

\b0 \
The ESP-r distribution is traditionally placed in either /usr/esru or in /opt/esru. The ESP-r Install script supports this via command line directives.  Create a folder for the standard distribution via: \
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   sudo mkdir /opt/esru\
  sudo chown pi /opt/esru\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 Create a folder structure for Source code in your home folder, checkout the current development_branch from the svn server and use the Install script to build the distribution in the folder /opt/esru with the GCC version 4 compilers:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  mkdir Src\
  mkdir Src/cvsdude\
  cd Src/cvsdude\
  svn checkout https://espr.svn.cvsdude.com/esp-r/branches/development_branch\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 To ensure that ESP-r can compile and run on machines with constrained memory you need to copy a few header files in the src/include folder.  THIS IS IMPORTANT.  Here is what to do:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd development_branch/src/include\
  cp building_small.h building.h\
  cp cfd_small.h cfd.h\
  cp control_small.h control.h\
  cp net_flow_small.h net_flow.h\
  cd ../..\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
ARM based computers respond well to compiler optimisation. It takes longer to compile but ESP-r modules can run more than twice as fast if you use the Install_o1 or Install_o2 variants.  The compile process is as follows:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
  cd development_branch/src\
  ./Install -d /opt/esru --gcc4 --reuse_ish_calcs --debug
\b0 \
\
Say yes to XML (if you have that library), say yes to databases and yes to example models and say yes to debug.  You have the option to compile for three different ESP-r interfaces.  The pure-text option is suitable for automated production work as all tasks are carried out via keyboard commands. The X11 interface is the [traditional] interface form.  The GTK interface uses a different graphic library and looks like the Native Windows version of ESP-r.  \
\
You can compile more than one interface, just be sure that the executables are located in separate folders (e.g. /opt/esru/esp-r/bin_text  /opt/esru/esp-r/binX11 /opt/esru/esp-r/binGTK. Of course, once you have installed the databases and exemplar models there is no need to repeat this for the other interface types. \
\
One way to do this is to use the standard Install command and then use the operating system to copy the executables e.g.:\
   <run the compile script for pure-text>\

\b   cd /opt/esru/esp-r\
  mkdir bin_text\
  cd bin\
  cp * ../bin_text\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <go back to the development_branch/src>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   make clean\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <run the install script for X11>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd /opt/esru/esp-r\
  mkdir binX11\
  cd bin\
  cp * ../binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
You can switch between these different ESP-r interfaces by going into the home/pi/bin folder and running the link_to script with the alternative path-to-executable e.g.:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  cd bin\
  link_to /opt/esru/esp-r/binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
After you have installed the databases and exemplar models there is no need to do this for subsequent Install sessions (unless the databases or exemplar models have been updated).\
\
The compile process on a Pi is 
\i\b much slower 
\i0\b0 than on desktop machines.  Expect a couple of hours for the complete Install cycle.\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 The PATH environment variable is usually defined in the ./profile file in your home folder. You might find a line which includes   
\b PATH="$HOME/bin:$PATH"
\b0 \
\
This instruction includes the /home/username/bin folder in the standard PATH environment variable. You could use a text editor to alter this line:  
\b PATH="$HOME/bin:/opt/esru/esp-r/bin:$PATH"
\b0 \
\
Or, copy the link_to and link_to_bash scripts in the src/bin folder into you $HOME/bin folder via the following commands:\
\

\b   cd \
  mkdir bin\
  cd Src/cvsdude/development_branch/src/bin\
  cp link_to ~/bin\
  cp link_to_bash ~/bin\
  cd\
  cd bin\
  ./link_to /opt/esru/esp-r/bin\
  cd\
  source .profile\
  which prj\

\b0 \
If the 'which prj' commands returns a location the ESP-r executables and libraries are now known.  \
\

\b\fs22 Using ESP-r
\b0\fs20 \
\
Remember when you log into your account on the Raspberry Pi that you need to issue the following command to re-fresh the system knowledge of where ESP-r lives:\
\

\b   cd\
  source .profile\

\b0 \
ESP-r has a large number of exemplar models.  These are located in the ESP-r distribution and the ESP-r Project Manager (prj) will access them and ask you where you want to copy them so that you can explore them and evolve them without messing up the originals.  One strategy is to create a Models subfolder of your home e.g. /home/pi/Models.  When prj asks you where you want to place a model change the suggested /home/pi to /home/pi/Models.  If you want to revisit and open it again you can use a command sequence in the following form (lets assume that the model folder is named small_house and the model cfg file is named small_house.cfg)\
\

\b   cd\
  cd Models/small_house/cfg\
  prj -file small_house.cfg\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b0 \cf0 \
The ESRU download web pages have documents related to managing source code, working with the subversion source code control environment as well as the ESP-r Cookbook which discusses the design of simulation models and working practices with ESP-r.  You may also find some useful materials in the folder src/manual/OS.\
\

\b\fs22 Shutting down an ARM computer
\b0\fs20 \
\
There is no off switch on most ARM computers  To properly stop it issue one of the the following commands:\
\
  
\b sudo shutdown -h now\
\
  sudo halt\
\

\b0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs24 \cf0 \
\
\
}